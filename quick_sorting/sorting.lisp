(declaim (optimize (debug 3) (speed 0) (space 0)))
(defun quick-sort (obj &optional left-bound right-bound)
  (let ((pivot 0)
	(left-bound (if (not left-bound)0 left-bound))
	(low-index 0)
	(high-index 0)
	(right-bound (if (not right-bound)(- (list-length obj) 1)right-bound)))
    (format t "The array to sort is: ~a~%" (subseq obj left-bound (+ right-bound 1)))
    (setq pivot (nth right-bound obj))
    (setq low-index left-bound)
    (setq high-index (- right-bound 1))
    (format t "THE LEFT-BOUND IS: ~d~%" left-bound)
    (format t "THE RIGHT_BOUND IS: ~d~%" right-bound)
    (format t "THE LOW INDEX IS: ~d~%" low-index)
    (format t "THE HIGH IS: ~d~%" high-index)
    (if (not (= left-bound right-bound))
	(loop while (or (< low-index high-index)
			(= low-index high-index))
	   do
	     (break)
	     (loop while (and (< low-index right-bound)
			      (< (nth low-index obj) pivot))
		  do
		    (print "HERE4")
		    (setq low-index (+ low-index 1)))))))
	       (loop while (> (nth high-index obj) pivot)
		  do
		    (print "HERE5")
		    (setq low-index (- high-index 1)))   
	       (break)
	       (format t "LOW INDEX at ~d, number: ~d~%" low-index (nth low-index obj))
	       (format t "HIGH INDEX at ~d, number: ~d~%" high-index (nth high-index obj))
	       (format t "Swapping ~d and ~d~%" (nth low-index obj) (nth high-index obj)))
	  (rotatef (nth high-index obj) (nth right-bound obj))
	  (rotatef (nth low-index obj) (nth right-bound obj))
	  (format t "After swapping: ~a~%" obj)
	  (format t "Left bound for next run: ~d~%Right bound for next run: ~d~%-----------------------------~%" left-bound high-index)
	  (quick-sort obj left-bound (- low-index 1))
	  (quick-sort obj (+ low-index 1) right-bound)))))
